name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Code quality checks
  lint-and-type:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-type
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --shard=${{ matrix.shard }}/3
        env:
          CI: true

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: matrix.shard == '1'
        with:
          name: coverage-${{ matrix.shard }}
          path: coverage/
          retention-days: 7

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-type
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run integration tests with Docker Compose
        run: docker compose -f docker/docker-compose.test.yml up --build --abort-on-container-exit

  # Build Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/frontend.Dockerfile
          push: false
          tags: nexus-vtt/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/backend.Dockerfile
          push: false
          tags: nexus-vtt/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        continue-on-error: true # Don't fail if Advanced Security is not enabled
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-fs-scan'

      - name: Upload Trivy results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan
          path: trivy-results.sarif
          retention-days: 30

  # Dependency audit
  audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for outdated packages
        run: npm outdated || true

  # SonarCloud analysis (optional - requires setup)
  # sonarcloud:
  #   name: SonarCloud Analysis
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v5
  #       with:
  #         fetch-depth: 0
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Success notification
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      [
        lint-and-type,
        unit-tests,
        integration-tests,
        docker-build,
        security-scan,
        audit,
      ]
    if: success()
    steps:
      - name: CI Pipeline Success
        run: echo "âœ… All CI checks passed successfully!"
