#!/usr/bin/env node\n\n/**\n * Smart development server coordinator\n * Detects available ports and updates environment before starting services\n */\n\nimport { spawn } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport fs from 'fs';\nimport net from 'net';\n\n// ES module equivalent of __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Colors\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  cyan: '\\x1b[36m',\n  magenta: '\\x1b[35m', \n  yellow: '\\x1b[33m',\n  green: '\\x1b[32m',\n  red: '\\x1b[31m'\n};\n\n// Port checking utility\nfunction checkPort(port) {\n  return new Promise((resolve) => {\n    const server = net.createServer();\n    \n    server.listen(port, () => {\n      server.once('close', () => resolve(true));\n      server.close();\n    });\n    \n    server.on('error', () => resolve(false));\n  });\n}\n\n// Find available port starting from preferred port\nasync function findAvailablePort(startPort, maxAttempts = 10) {\n  for (let i = 0; i < maxAttempts; i++) {\n    const port = startPort + i;\n    if (await checkPort(port)) {\n      return port;\n    }\n  }\n  throw new Error(`No available port found starting from ${startPort}`);\n}\n\n// Update .env file with discovered ports\nfunction updateEnvFile(ports) {\n  const envPath = path.join(__dirname, '../.env');\n  const envContent = `# Vite Environment Variables\\n# Auto-generated by start-all script\\n\\n# Asset Server URL (must start with VITE_ to be available in browser)\\nVITE_ASSET_SERVER_URL=http://localhost:${ports.asset}\\n\\n# Development server ports\\nPORT=${ports.frontend}\\nWS_PORT=${ports.websocket}\\nASSET_PORT=${ports.asset}\\n`;\n  \n  fs.writeFileSync(envPath, envContent);\n  console.log(`${colors.green}📝 Updated .env with available ports${colors.reset}`);\n}\n\nclass SmartDevelopmentStarter {\n  constructor() {\n    this.processes = [];\n    this.isShuttingDown = false;\n  }\n\n  async start() {\n    console.log(`${colors.bright}🎲 Starting Nexus VTT Development Servers${colors.reset}`);\n    console.log(`${colors.cyan}🔍 Detecting available ports...${colors.reset}\\n`);\n\n    try {\n      // Detect available ports\n      const ports = {\n        frontend: await findAvailablePort(5173),\n        websocket: await findAvailablePort(5000),\n        asset: await findAvailablePort(8080)\n      };\n\n      console.log(`${colors.green}✅ Available ports detected:${colors.reset}`);\n      console.log(`   Frontend:  ${ports.frontend}`);\n      console.log(`   WebSocket: ${ports.websocket}`);\n      console.log(`   Assets:    ${ports.asset}\\n`);\n\n      // Update environment file\n      updateEnvFile(ports);\n\n      // Define services with detected ports\n      const services = [\n        {\n          name: 'WebSocket Server',\n          command: 'npm',\n          args: ['run', 'server:dev'],\n          cwd: path.join(__dirname, '..'),\n          prefix: '🔌 [WEBSOCKET]',\n          color: colors.magenta,\n          env: { PORT: ports.websocket.toString() },\n          startupDelay: 0\n        },\n        {\n          name: 'Asset Server',\n          command: 'npm',\n          args: ['run', 'dev'],\n          cwd: path.join(__dirname, '../asset-server'),\n          prefix: '📁 [ASSETS]',\n          color: colors.yellow,\n          env: { PORT: ports.asset.toString() },\n          startupDelay: 1000\n        },\n        {\n          name: 'Frontend',\n          command: 'npm',\n          args: ['run', 'dev'],\n          cwd: path.join(__dirname, '..'),\n          prefix: '🖥️  [FRONTEND]',\n          color: colors.cyan,\n          env: { PORT: ports.frontend.toString() },\n          startupDelay: 2000 // Start frontend last so it picks up updated .env\n        }\n      ];\n\n      // Setup graceful shutdown\n      this.setupGracefulShutdown();\n\n      // Start services with staggered delays\n      for (const service of services) {\n        setTimeout(() => {\n          this.startService(service);\n        }, service.startupDelay);\n      }\n\n      // Show success message\n      setTimeout(() => {\n        console.log(`\\n${colors.bright}✅ All services started successfully!${colors.reset}`);\n        console.log(`🌐 Frontend:     http://localhost:${ports.frontend}`);\n        console.log(`🔌 WebSocket:    ws://localhost:${ports.websocket}/ws`);\n        console.log(`📁 Asset Server: http://localhost:${ports.asset}`);\n        console.log(`\\n${colors.bright}📝 Press Ctrl+C to stop all services${colors.reset}\\n`);\n      }, 4000);\n\n    } catch (error) {\n      console.error(`${colors.red}❌ Failed to start services: ${error.message}${colors.reset}`);\n      process.exit(1);\n    }\n  }\n\n  startService(service) {\n    console.log(`${service.color}🚀 Starting ${service.name}...${colors.reset}`);\n    \n    const childProcess = spawn(service.command, service.args, {\n      cwd: service.cwd,\n      stdio: ['pipe', 'pipe', 'pipe'],\n      env: { \n        ...process.env,\n        ...service.env,\n        FORCE_COLOR: '1'\n      }\n    });\n\n    this.processes.push({ ...service, process: childProcess });\n\n    // Handle stdout\n    childProcess.stdout.on('data', (data) => {\n      const lines = data.toString().split('\\n').filter(line => line.trim());\n      lines.forEach(line => {\n        console.log(`${service.color}${service.prefix}${colors.reset} ${line}`);\n      });\n    });\n\n    // Handle stderr  \n    childProcess.stderr.on('data', (data) => {\n      const lines = data.toString().split('\\n').filter(line => line.trim());\n      lines.forEach(line => {\n        console.log(`${service.color}${service.prefix}${colors.reset} ${line}`);\n      });\n    });\n\n    // Handle process exit\n    childProcess.on('close', (code) => {\n      if (!this.isShuttingDown) {\n        console.log(`${service.color}${service.prefix}${colors.reset} Process exited with code ${code}`);\n      }\n    });\n\n    childProcess.on('error', (error) => {\n      console.log(`${service.color}${service.prefix}${colors.reset} Error: ${error.message}`);\n    });\n  }\n\n  setupGracefulShutdown() {\n    const shutdown = () => {\n      if (this.isShuttingDown) return;\n      this.isShuttingDown = true;\n\n      console.log(`\\n${colors.bright}🛑 Shutting down all services...${colors.reset}`);\n      \n      this.processes.forEach(({ name, process, color }) => {\n        console.log(`   ${color}Stopping ${name}...${colors.reset}`);\n        process.kill('SIGTERM');\n      });\n\n      // Force kill after 5 seconds\n      setTimeout(() => {\n        this.processes.forEach(({ name, process, color }) => {\n          if (!process.killed) {\n            console.log(`   ${color}Force stopping ${name}...${colors.reset}`);\n            process.kill('SIGKILL');\n          }\n        });\n        process.exit(0);\n      }, 5000);\n\n      // Clean exit when all processes are done\n      Promise.all(\n        this.processes.map(({ process }) => new Promise(resolve => {\n          process.on('close', resolve);\n        }))\n      ).then(() => {\n        console.log(`${colors.bright}✅ All services stopped${colors.reset}`);\n        process.exit(0);\n      });\n    };\n\n    process.on('SIGINT', shutdown);\n    process.on('SIGTERM', shutdown);\n  }\n}\n\n// Start the coordinator\nconst starter = new SmartDevelopmentStarter();\nstarter.start();\n