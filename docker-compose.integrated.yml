# Integrated Nexus VTT + NexusCodex Docker Compose
# Combines both services into a single development environment
# Start with: docker compose -f docker-compose.integrated.yml up

services:
  # =============================================================================
  # Nexus VTT Services
  # =============================================================================

  # Frontend dev server with hot reload
  vtt-frontend:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - '5173:5173' # Vite dev server
    environment:
      - NODE_ENV=development
      - VITE_WS_URL=ws://localhost:5001/ws
      - VITE_WS_HOST=localhost
      - VITE_WS_PORT=5001
      # Proxy URLs for Docker networking
      - VITE_API_PROXY_URL=http://vtt-backend:5001
      - VITE_WS_PROXY_URL=ws://vtt-backend:5001
      # OAuth callback URL
      - FRONTEND_URL=http://localhost:5173/dashboard
      # NexusCodex API URLs
      - VITE_DOC_API_URL=http://localhost:3000
      - VITE_DOC_WS_URL=ws://localhost:3002
    networks:
      - nexus-integrated
    depends_on:
      - vtt-backend
      - doc-api

  # Backend WebSocket server
  vtt-backend:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm install && npm run server:dev"
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - '5001:5001' # WebSocket + HTTP server
    environment:
      - NODE_ENV=development
      - PORT=5001
      - DATABASE_URL=postgresql://nexus:password@postgres:5432/nexus
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-secret-change-in-production
      - CORS_ORIGIN=http://localhost:5173
      # OAuth Configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_CALLBACK_URL=http://localhost:5001/auth/google/callback
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - SESSION_SECRET=nexus-session-secret-dev
      # Frontend URL for OAuth redirects
      - FRONTEND_URL=http://localhost:5173/dashboard
      # NexusCodex Service URLs (internal)
      - DOC_API_URL=http://doc-api:3000
      - DOC_WS_URL=ws://doc-websocket:3002
    networks:
      - nexus-integrated
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  # =============================================================================
  # NexusCodex Document Services
  # =============================================================================

  # Document API Service (REST)
  doc-api:
    build:
      context: ../NexusCodex/services/doc-api
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://nexus:password@postgres:5432/nexus_docs
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=documents
      - QUEUE_NAME=document-processing
      # S3/MinIO Configuration
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=admin
      - S3_SECRET_KEY=password
      - S3_BUCKET=documents
      - S3_REGION=us-east-1
      - S3_FORCE_PATH_STYLE=true
      - UPLOAD_URL_EXPIRY=3600
      - DOWNLOAD_URL_EXPIRY=3600
      - MAX_FILE_SIZE=104857600
      # CORS for Nexus VTT
      - CORS_ORIGIN=http://localhost:5173,http://localhost:5001
    volumes:
      - ../NexusCodex/services/doc-api/src:/app/src
      - ../NexusCodex/services/doc-api/prisma:/app/prisma
    networks:
      - nexus-integrated
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Document Background Processor
  doc-processor:
    build:
      context: ../NexusCodex/services/doc-processor
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://nexus:password@postgres:5432/nexus_docs
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=documents
      - QUEUE_NAME=document-processing
      # S3/MinIO Configuration
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=admin
      - S3_SECRET_KEY=password
      - S3_BUCKET=documents
      - S3_REGION=us-east-1
      - S3_FORCE_PATH_STYLE=true
    volumes:
      - ../NexusCodex/services/doc-processor/src:/app/src
    networks:
      - nexus-integrated
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Document WebSocket Service (Real-time collaboration)
  doc-websocket:
    build:
      context: ../NexusCodex/services/doc-websocket
      dockerfile: Dockerfile
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://nexus:password@postgres:5432/nexus_docs
      - REDIS_URL=redis://redis:6379
      - SESSION_TTL=3600
      # CORS for Nexus VTT
      - CORS_ORIGIN=http://localhost:5173,http://localhost:5001
    volumes:
      - ../NexusCodex/services/doc-websocket/src:/app/src
    networks:
      - nexus-integrated
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped

  # =============================================================================
  # Shared Infrastructure
  # =============================================================================

  # PostgreSQL - Shared database for both Nexus VTT and NexusCodex
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=nexus
      - POSTGRES_PASSWORD=password
      # Multiple databases will be created via init script
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Init script to create both databases
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - nexus-integrated
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U nexus']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Shared for sessions and job queue
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --loglevel debug
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - nexus-integrated

  # MinIO - S3-compatible storage for documents
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - '9000:9000' # S3 API
      - '9001:9001' # Web Console
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - minio_data:/data
    networks:
      - nexus-integrated
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # ElasticSearch - Full-text search for documents
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - nexus-integrated
    healthcheck:
      test:
        ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

  # =============================================================================
  # Development Tools
  # =============================================================================

  # Asset server for Nexus VTT assets
  asset-server:
    image: nginx:alpine
    volumes:
      - ./assets:/usr/share/nginx/html:ro
    ports:
      - '8081:80'
    networks:
      - nexus-integrated

  # Adminer - Database GUI (optional, uncomment to use)
  # adminer:
  #   image: adminer
  #   ports:
  #     - "8082:8080"
  #   networks:
  #     - nexus-integrated
  #   depends_on:
  #     - postgres

networks:
  nexus-integrated:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  elasticsearch_data:
