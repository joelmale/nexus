// Drawing and measurement tool types for Scene Canvas\n\n// Basic drawing tools\nexport type DrawingTool = \n  | 'pencil'      // Freehand drawing\n  | 'line'        // Straight lines\n  | 'rectangle'   // Rectangles/squares\n  | 'circle'      // Circles/ellipses\n  | 'polygon'     // Multi-point polygons\n  | 'text'        // Text annotations\n  | 'eraser'      // Eraser tool\n  \n  // D&D 5e specific shapes\n  | 'cone'            // Cone of effect (follows 5e rules)\n  | 'aoe-sphere'      // Sphere/radius effects\n  | 'aoe-cube'        // Cube effects\n  | 'aoe-cylinder'    // Cylinder effects  \n  | 'aoe-line'        // Line effects\n  \n  // DM-only tools\n  | 'fog-of-war'      // Fog of war areas\n  | 'dynamic-lighting' // Light sources\n  | 'vision-blocking'  // Vision blocking walls\n  | 'dm-notes'        // DM-only annotations;\n\n// Measurement tools\nexport type MeasurementTool = 'measure';\n\n// Drawing style configuration\nexport interface DrawingStyle {\n  // Fill properties\n  fillColor: string;\n  fillOpacity: number;\n  \n  // Stroke properties\n  strokeColor: string;\n  strokeWidth: number;\n  strokeDashArray?: string; // CSS dash pattern, e.g., \"5,5\" for dashed\n  \n  // D&D specific properties\n  dndSpellLevel?: number;    // 0-9 for cantrip to 9th level\n  aoeRadius?: number;        // Radius in feet for sphere effects\n  coneLength?: number;       // Length in feet for cone effects\n  \n  // DM visibility properties\n  visibleToPlayers?: boolean; // DM can hide drawings from players\n  dmNotesOnly?: boolean;      // Only visible to DM\n}\n\n// Default drawing styles\nexport const defaultDrawingStyle: DrawingStyle = {\n  fillColor: '#ff0000',\n  fillOpacity: 0.3,\n  strokeColor: '#ff0000',\n  strokeWidth: 2,\n  strokeDashArray: undefined,\n  dndSpellLevel: 1,\n  aoeRadius: 20,\n  coneLength: 15,\n  visibleToPlayers: true,\n  dmNotesOnly: false,\n};\n\n// Drawing shape data structures\nexport interface Point {\n  x: number;\n  y: number;\n}\n\nexport interface BaseDrawing {\n  id: string;\n  type: DrawingTool;\n  style: DrawingStyle;\n  layer: 'background' | 'tokens' | 'effects' | 'dm-only';\n  createdAt: number;\n  updatedAt: number;\n  createdBy: string; // User ID who created this drawing\n}\n\nexport interface LineDrawing extends BaseDrawing {\n  type: 'line';\n  start: Point;\n  end: Point;\n}\n\nexport interface RectangleDrawing extends BaseDrawing {\n  type: 'rectangle';\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface CircleDrawing extends BaseDrawing {\n  type: 'circle';\n  center: Point;\n  radius: number;\n}\n\nexport interface PolygonDrawing extends BaseDrawing {\n  type: 'polygon';\n  points: Point[];\n}\n\nexport interface PencilDrawing extends BaseDrawing {\n  type: 'pencil';\n  points: Point[];\n}\n\nexport interface TextDrawing extends BaseDrawing {\n  type: 'text';\n  position: Point;\n  text: string;\n  fontSize: number;\n  fontFamily: string;\n}\n\n// D&D 5e specific shapes\nexport interface ConeDrawing extends BaseDrawing {\n  type: 'cone';\n  origin: Point;      // Point of origin for the cone\n  direction: number;  // Angle in degrees (0 = right, 90 = down, etc.)\n  length: number;     // Length in feet (converted to pixels based on grid)\n  angle: number;      // Cone angle in degrees (typically 90Â° for most spells)\n}\n\nexport interface SphereAoEDrawing extends BaseDrawing {\n  type: 'aoe-sphere';\n  center: Point;\n  radius: number; // Radius in feet\n}\n\nexport interface CubeAoEDrawing extends BaseDrawing {\n  type: 'aoe-cube';\n  origin: Point;  // Corner of the cube\n  size: number;   // Side length in feet\n}\n\nexport interface CylinderAoEDrawing extends BaseDrawing {\n  type: 'aoe-cylinder';\n  center: Point;\n  radius: number; // Radius in feet\n  height: number; // Height in feet (for display purposes)\n}\n\nexport interface LineAoEDrawing extends BaseDrawing {\n  type: 'aoe-line';\n  start: Point;\n  end: Point;\n  width: number; // Width in feet\n}\n\n// DM-only drawing types\nexport interface FogOfWarDrawing extends BaseDrawing {\n  type: 'fog-of-war';\n  area: Point[];      // Polygon defining the fog area\n  density: number;    // 0-1, how opaque the fog is\n  revealed: boolean;  // Whether this area is currently revealed\n}\n\nexport interface DynamicLightDrawing extends BaseDrawing {\n  type: 'dynamic-lighting';\n  center: Point;\n  brightRadius: number;   // Bright light radius in feet\n  dimRadius: number;      // Dim light radius in feet\n  color: string;          // Light color\n  flickering: boolean;    // Whether the light flickers\n}\n\nexport interface VisionBlockDrawing extends BaseDrawing {\n  type: 'vision-blocking';\n  points: Point[];        // Wall/barrier points\n  height: number;         // Height in feet (affects flying creatures)\n  transparent: boolean;   // Can see through but not move through\n}\n\nexport interface DMNotesDrawing extends BaseDrawing {\n  type: 'dm-notes';\n  position: Point;\n  text: string;\n  private: boolean; // If true, only DM can see\n}\n\n// Union type for all drawing types\nexport type Drawing = \n  | LineDrawing\n  | RectangleDrawing\n  | CircleDrawing\n  | PolygonDrawing\n  | PencilDrawing\n  | TextDrawing\n  | ConeDrawing\n  | SphereAoEDrawing\n  | CubeAoEDrawing\n  | CylinderAoEDrawing\n  | LineAoEDrawing\n  | FogOfWarDrawing\n  | DynamicLightDrawing\n  | VisionBlockDrawing\n  | DMNotesDrawing;\n\n// Measurement data\nexport interface Measurement {\n  id: string;\n  start: Point;\n  end: Point;\n  distance: number; // Distance in feet\n  gridDistance: number; // Distance in grid units\n  createdAt: number;\n  createdBy: string;\n  temporary: boolean; // If true, disappears after a short time\n}\n\n// D&D 5e spell effect presets\nexport const dndSpellPresets = {\n  // Cantrips\n  'acid-splash': { type: 'aoe-sphere' as const, radius: 5, level: 0 },\n  'sacred-flame': { type: 'aoe-cylinder' as const, radius: 2.5, height: 40, level: 0 },\n  \n  // 1st Level\n  'burning-hands': { type: 'cone' as const, length: 15, angle: 90, level: 1 },\n  'thunderwave': { type: 'aoe-cube' as const, size: 15, level: 1 },\n  \n  // 2nd Level\n  'shatter': { type: 'aoe-sphere' as const, radius: 10, level: 2 },\n  \n  // 3rd Level\n  'fireball': { type: 'aoe-sphere' as const, radius: 20, level: 3 },\n  'lightning-bolt': { type: 'aoe-line' as const, length: 100, width: 5, level: 3 },\n  'cone-of-cold': { type: 'cone' as const, length: 60, angle: 90, level: 5 },\n  \n  // Higher levels\n  'meteor-swarm': { type: 'aoe-sphere' as const, radius: 40, level: 9 },\n};\n\n// Utility functions for D&D measurements\nexport const dndUtils = {\n  // Convert feet to pixels based on grid size\n  feetToPixels: (feet: number, gridSize: number): number => {\n    // Assuming 5 feet per grid square (standard D&D)\n    return (feet / 5) * gridSize;\n  },\n  \n  // Convert pixels to feet based on grid size\n  pixelsToFeet: (pixels: number, gridSize: number): number => {\n    return (pixels / gridSize) * 5;\n  },\n  \n  // Calculate diagonal distance using D&D 5e rules\n  // (Every second diagonal counts as 10 feet instead of 5)\n  calculateDiagonalDistance: (deltaX: number, deltaY: number, gridSize: number): number => {\n    const xSquares = Math.abs(deltaX / gridSize);\n    const ySquares = Math.abs(deltaY / gridSize);\n    const minSquares = Math.min(xSquares, ySquares);\n    const maxSquares = Math.max(xSquares, ySquares);\n    \n    // First diagonal movement costs 5 feet, second costs 10 feet, alternating\n    const diagonalCost = Math.floor(minSquares / 2) * 15 + (minSquares % 2) * 5;\n    const straightCost = (maxSquares - minSquares) * 5;\n    \n    return diagonalCost + straightCost;\n  },\n  \n  // Get spell area dimensions based on level\n  getSpellDimensions: (spellType: string, level: number): Partial<DrawingStyle> => {\n    const preset = dndSpellPresets[spellType as keyof typeof dndSpellPresets];\n    if (preset) {\n      return {\n        dndSpellLevel: preset.level,\n        aoeRadius: 'radius' in preset ? preset.radius : undefined,\n        coneLength: 'length' in preset ? preset.length : undefined,\n      };\n    }\n    return {};\n  },\n};\n